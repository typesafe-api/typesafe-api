#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Check if version type argument is provided
if (process.argv.length < 3) {
    console.error("Please provide a version update type (patch, minor, or major)");
    console.error("Usage: node scripts/version.js <patch|minor|major>");
    process.exit(1);
}

const UPDATE_TYPE = process.argv[2].toLowerCase();

// Validate update type
if (!['patch', 'minor', 'major'].includes(UPDATE_TYPE)) {
    console.error("Version update type must be one of: patch, minor, major");
    process.exit(1);
}

// Read current version from core package
const corePkgPath = path.join(__dirname, '../packages/core/package.json');
const corePkg = JSON.parse(fs.readFileSync(corePkgPath, 'utf8'));
const currentVersion = corePkg.version;

// Parse version components
const [major, minor, patch] = currentVersion.split('.').map(Number);

// Calculate new version
let NEW_VERSION;
switch (UPDATE_TYPE) {
    case 'patch':
        NEW_VERSION = `${major}.${minor}.${patch + 1}`;
        break;
    case 'minor':
        NEW_VERSION = `${major}.${minor + 1}.0`;
        break;
    case 'major':
        NEW_VERSION = `${major + 1}.0.0`;
        break;
}

// Helper function to update package.json
function updatePackageJson(filePath, updateFn) {
    const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    const updated = updateFn(content);
    fs.writeFileSync(filePath, JSON.stringify(updated, null, 2) + '\n');
}

console.log(`Updating version from ${currentVersion} to ${NEW_VERSION} (${UPDATE_TYPE} update)`);

// Update core package
updatePackageJson(
    corePkgPath,
    (pkg) => ({ ...pkg, version: NEW_VERSION })
);

// Update express package and its peer dependencies
updatePackageJson(
    path.join(__dirname, '../packages/express/package.json'),
    (pkg) => ({
        ...pkg,
        version: NEW_VERSION,
        peerDependencies: {
            ...pkg.peerDependencies,
            '@typesafe-api/core': `^${NEW_VERSION}`
        }
    })
);

// Update serverless package and its peer dependencies
updatePackageJson(
    path.join(__dirname, '../packages/serverless/package.json'),
    (pkg) => ({
        ...pkg,
        version: NEW_VERSION,
        peerDependencies: {
            ...pkg.peerDependencies,
            '@typesafe-api/core': `^${NEW_VERSION}`
        }
    })
);

console.log(`Version updated successfully to ${NEW_VERSION}`);
console.log("Now you need to commit and push the changes and run ./scripts/publish"); 